{{- if not (lookup "apps/v1" "DaemonSet" "kube-system" "portworx") }}

  {{- $isCoreOS := .Values.isTargetOSCoreOS | default false }}
  {{- $internalKVDB := .Values.internalKVDB | default false }}
  {{- $etcdEndPoints := .Values.etcdEndPoint }}
  {{- $openshiftInstall := .Values.openshiftInstall | default false }}
  {{- $EKSInstall := .Values.EKSInstall | default false }}
  {{- $pksInstall := .Values.pksInstall | default false }}
  {{- $AKSInstall := .Values.AKSInstall | default false }}
  {{- $usefileSystemDrive := .Values.usefileSystemDrive | default false }}
  {{- $usedrivesAndPartitions := .Values.usedrivesAndPartitions | default false }}
  {{- $secretType := .Values.secretType | default "k8s" }}
  {{- $deployEnvironmentIKS := .Capabilities.KubeVersion.GitVersion | regexMatch "IKS" }}
  {{- $drives := .Values.drives | default "none" }}

kind: StorageCluster
apiVersion: core.libopenstorage.org/v1
metadata:
  name: "{{ required "Clustername cannot be empty" .Values.clusterName }}"
  namespace: kube-system
  annotations:
    {{- if eq $openshiftInstall true }}
    portworx.io/is-openshift: "true"
    {{- end }}
    {{- if eq $pksInstall true }}
    portworx.io/is-pks: "true"
    {{- end }}
    {{- if eq $EKSInstall true }}
    portworx.io/is-eks: "true"
    {{- end }}
    {{- if eq $AKSInstall true }}
    portworx.io/is-aks: "true"
    {{- end }}
    # TODO: remove
    portworx.io/migration-approved: "false"
spec:
  image: portworx/oci-monitor:{{ required "A valid Image tag is required in the SemVer format" .Values.imageVersion }}
  imagePullPolicy: Always
  kvdb:
  {{- if eq $internalKVDB true }}
    internal: true
  {{- else }}
    internal: false
    {{- if empty $etcdEndPoints }}
    "{{ required "A valid ETCD url in the format etcd:http://<your-etcd-endpoint> is required. Verify that the key is correct and there isnt any typo in specifying that, also ensure it is accessible from all node of your kubernetes cluster" .etcdEndPoint}}"
    {{- else }}
    endpoints:
      {{- $endpoints := $etcdEndPoints | split ";" }}
      {{- range $key, $val := $endpoints }}
      - {{$val}}
      {{- end }}
    {{- end }}
  {{- end }}

  storage:
    {{- if not (eq $drives "none") }}
    devices:
      {{- $driveNames := $drives | split ";" }}
      {{- range $index, $name := $driveNames }}
      - {{ $name }}
      {{- end }}
    {{- end }}
    {{- if eq $usefileSystemDrive true }}
    forceUseDisks: true
    {{- end }}
    {{- if eq $usedrivesAndPartitions true }}
    useAllWithPartitions: true
    {{- end }}

  {{- if ne $secretType "none" }}
  secretsProvider: {{$secretType}}
  {{- else }}
    {{- if $deployEnvironmentIKS }}
  secretsProvider: ibm-kp
    {{- end }}
  {{- end }}

  stork:
    enabled: true
    args:
      webhook-controller: "false"
  autopilot:
    enabled: true
  monitoring:
    prometheus:
      enabled: true
      exportMetrics: true
  featureGates:
    CSI: "true"
  volumes:
    {{- if eq $isCoreOS true}}
    - name: src
      mountPath: /lib/modules
      hostPath: /lib/modules
    {{- end }}
{{- end }}

